"""empty message

Revision ID: 21819b371a35
Revises:
Create Date: 2018-10-10 16:22:25.986528

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlalchemy_utils
from sqlalchemy_searchable import sync_trigger

# revision identifiers, used by Alembic.
revision = '21819b371a35'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()

    op.add_column('metabolite', sa.Column('complex_search_vector', sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True))
    op.add_column('metabolite', sa.Column('simple_search_vector', sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True))
    sync_trigger(conn, 'metabolite', 'simple_search_vector', ['metabolite_name'])
    sync_trigger(conn, 'metabolite', 'complex_search_vector', ['metabolite_name', 'description'])

    op.create_index('ix_metabolite_complex_search_vector', 'metabolite', ['complex_search_vector'], unique=False, postgresql_using='gin')
    op.create_index('ix_metabolite_simple_search_vector', 'metabolite', ['simple_search_vector'], unique=False, postgresql_using='gin')
    op.drop_index('ix_metabolite_search_vector', table_name='metabolite')
    op.drop_column('metabolite', 'search_vector')
    op.drop_index('ix_method_search_vector', table_name='method')
    op.drop_column('method', 'search_vector')
    op.add_column('protein_complex', sa.Column('simple_search_vector', sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True))
    sync_trigger(conn, 'protein_complex', 'simple_search_vector', ['complex_name'])

    op.create_index('ix_protein_complex_simple_search_vector', 'protein_complex', ['simple_search_vector'], unique=False, postgresql_using='gin')
    op.drop_index('ix_protein_complex_search_vector', table_name='protein_complex')
    op.drop_column('protein_complex', 'search_vector')
    op.drop_index('ix_protein_interactions_search_vector', table_name='protein_interactions')
    op.drop_column('protein_interactions', 'search_vector')
    op.add_column('protein_subunit', sa.Column('complex_search_vector', sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True))
    op.add_column('protein_subunit', sa.Column('simple_search_vector', sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True))
    sync_trigger(conn, 'protein_subunit', 'simple_search_vector', ['subunit_name'])
    sync_trigger(conn, 'protein_subunit', 'complex_search_vector', ['subunit_name', 'uniprot_id', 'gene_name'])

    op.create_index('ix_protein_subunit_complex_search_vector', 'protein_subunit', ['complex_search_vector'], unique=False, postgresql_using='gin')
    op.create_index('ix_protein_subunit_simple_search_vector', 'protein_subunit', ['simple_search_vector'], unique=False, postgresql_using='gin')
    op.drop_index('ix_protein_subunit_search_vector', table_name='protein_subunit')
    op.drop_column('protein_subunit', 'search_vector')




    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()

    op.add_column('protein_subunit', sa.Column('search_vector', postgresql.TSVECTOR(), autoincrement=False, nullable=True))
    sync_trigger(conn, 'protein_subunit', 'search_vector', ['subunit_name', 'uniprot_id', 'gene_name', 'canonical_sequence'])

    op.create_index('ix_protein_subunit_search_vector', 'protein_subunit', ['search_vector'], unique=False)
    op.drop_index('ix_protein_subunit_simple_search_vector', table_name='protein_subunit')
    op.drop_index('ix_protein_subunit_complex_search_vector', table_name='protein_subunit')
    op.drop_column('protein_subunit', 'simple_search_vector')
    op.drop_column('protein_subunit', 'complex_search_vector')
    op.add_column('protein_interactions', sa.Column('search_vector', postgresql.TSVECTOR(), autoincrement=False, nullable=True))
    op.create_index('ix_protein_interactions_search_vector', 'protein_interactions', ['search_vector'], unique=False)
    op.add_column('protein_complex', sa.Column('search_vector', postgresql.TSVECTOR(), autoincrement=False, nullable=True))
    sync_trigger(conn, 'protein_complex', 'search_vector', ['complex_name', 'go_id', 'funcat_id', 'su_cmt'])

    op.create_index('ix_protein_complex_search_vector', 'protein_complex', ['search_vector'], unique=False)
    op.drop_index('ix_protein_complex_simple_search_vector', table_name='protein_complex')
    op.drop_column('protein_complex', 'simple_search_vector')
    op.add_column('method', sa.Column('search_vector', postgresql.TSVECTOR(), autoincrement=False, nullable=True))
    op.create_index('ix_method_search_vector', 'method', ['search_vector'], unique=False)
    op.add_column('metabolite', sa.Column('search_vector', postgresql.TSVECTOR(), autoincrement=False, nullable=True))
    sync_trigger(conn, 'metabolite', 'search_vector', ['metabolite_name', 'description'])

    op.create_index('ix_metabolite_search_vector', 'metabolite', ['search_vector'], unique=False)
    op.drop_index('ix_metabolite_simple_search_vector', table_name='metabolite')
    op.drop_index('ix_metabolite_complex_search_vector', table_name='metabolite')
    op.drop_column('metabolite', 'simple_search_vector')
    op.drop_column('metabolite', 'complex_search_vector')
    # ### end Alembic commands ###
