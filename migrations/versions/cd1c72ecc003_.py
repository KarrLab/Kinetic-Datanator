"""empty message

Revision ID: cd1c72ecc003
Revises: 
Create Date: 2018-03-06 18:12:43.727975

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'cd1c72ecc003'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('_metadata_resource')
    op.drop_table('reaction')
    op.drop_table('_experimentmetadata_resource')
    op.drop_table('experiment')
    op.drop_table('_metadata_characteristic')
    op.drop_table('experiment_design')
    op.drop_table('protein_subunit')
    op.drop_table('progress')
    op.drop_table('_experimentmetadata_experimentdesign')
    op.drop_table('rnaseqdataset_rnaseqexperiment')
    op.drop_table('abundance_dataset')
    op.drop_table('parameter')
    op.drop_table('resource')
    op.drop_table('physical_property')
    op.drop_table('kinetic_law')
    op.drop_table('_experimentmetadata_taxon')
    op.drop_table('data_format')
    op.drop_table('_experimentmetadata')
    op.drop_table('_metadata_conditions')
    op.drop_table('conditions')
    op.drop_table('cell_line')
    op.drop_table('_experimentmetadata_method')
    op.drop_table('physical_entity')
    op.drop_table('method')
    op.drop_table('dna_bidning_data')
    op.drop_table('characteristic')
    op.drop_table('rna_seq_experiment')
    op.drop_table('_metadata_cell_line')
    op.drop_table('structure')
    op.drop_table('synonym')
    op.drop_table('_metadata')
    op.drop_table('_metadata_method')
    op.drop_table('taxon')
    op.drop_table('_experimentmetadata_experimenttype')
    op.drop_table('_metadata_compartment')
    op.drop_table('cell_compartment')
    op.drop_table('experiment_type')
    op.drop_table('protein_interactions')
    op.drop_table('protein_complex')
    op.drop_table('dna_binding_dataset')
    op.drop_table('observation')
    op.drop_table('reference_genome')
    op.drop_table('_metadata_variable')
    op.drop_table('abundance_data')
    op.drop_table('_metadata_synonym')
    op.drop_table('variable')
    op.drop_table('_metadata_taxon')
    op.drop_table('rna_seq_dataset')
    op.drop_table('concentration')
    op.drop_table('compound')
    op.drop_table('subunit_interaction')
    op.drop_table('rnaseqdataset_referencegenome')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('rnaseqdataset_referencegenome',
    sa.Column('sample_id', sa.INTEGER(), nullable=True),
    sa.Column('reference_genome_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['reference_genome_id'], [u'reference_genome.reference_genome_id'], ),
    sa.ForeignKeyConstraint(['sample_id'], [u'rna_seq_dataset.sample_id'], )
    )
    op.create_table('subunit_interaction',
    sa.Column('protein_subunit_id', sa.INTEGER(), nullable=True),
    sa.Column('interaction_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['interaction_id'], [u'protein_interactions.interaction_id'], ),
    sa.ForeignKeyConstraint(['protein_subunit_id'], [u'protein_subunit.subunit_id'], )
    )
    op.create_table('compound',
    sa.Column('compound_id', sa.INTEGER(), nullable=False),
    sa.Column('compound_name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('description', sa.VARCHAR(length=255), nullable=True),
    sa.Column('comment', sa.VARCHAR(length=255), nullable=True),
    sa.Column('_is_name_ambiguous', sa.BOOLEAN(), nullable=True),
    sa.Column('structure_id', sa.INTEGER(), nullable=True),
    sa.CheckConstraint(u'_is_name_ambiguous IN (0, 1)'),
    sa.ForeignKeyConstraint(['compound_id'], [u'physical_entity.observation_id'], ),
    sa.ForeignKeyConstraint(['structure_id'], [u'structure.struct_id'], ),
    sa.PrimaryKeyConstraint('compound_id')
    )
    op.create_table('concentration',
    sa.Column('concentration_id', sa.INTEGER(), nullable=False),
    sa.Column('compound_id', sa.INTEGER(), nullable=True),
    sa.Column('value', sa.FLOAT(), nullable=True),
    sa.Column('error', sa.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['compound_id'], [u'compound.compound_id'], ),
    sa.ForeignKeyConstraint(['concentration_id'], [u'physical_property.observation_id'], ),
    sa.PrimaryKeyConstraint('concentration_id')
    )
    op.create_table('rna_seq_dataset',
    sa.Column('sample_id', sa.INTEGER(), nullable=False),
    sa.Column('experiment_accession_number', sa.VARCHAR(), nullable=True),
    sa.Column('sample_name', sa.VARCHAR(), nullable=True),
    sa.Column('assay', sa.VARCHAR(), nullable=True),
    sa.Column('ensembl_organism_strain', sa.VARCHAR(), nullable=True),
    sa.Column('read_type', sa.VARCHAR(), nullable=True),
    sa.Column('full_strain_specificity', sa.BOOLEAN(), nullable=True),
    sa.CheckConstraint(u'full_strain_specificity IN (0, 1)'),
    sa.ForeignKeyConstraint(['sample_id'], [u'physical_property.observation_id'], ),
    sa.PrimaryKeyConstraint('sample_id')
    )
    op.create_table('_metadata_taxon',
    sa.Column('_metadata_id', sa.INTEGER(), nullable=True),
    sa.Column('taxon_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_metadata_id'], [u'_metadata.id'], ),
    sa.ForeignKeyConstraint(['taxon_id'], [u'taxon.ncbi_id'], )
    )
    op.create_table('variable',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('category', sa.VARCHAR(length=255), nullable=True),
    sa.Column('value', sa.VARCHAR(length=255), nullable=True),
    sa.Column('units', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('_metadata_synonym',
    sa.Column('_metadata_id', sa.INTEGER(), nullable=True),
    sa.Column('synonym_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_metadata_id'], [u'_metadata.id'], ),
    sa.ForeignKeyConstraint(['synonym_id'], [u'synonym.id'], )
    )
    op.create_table('abundance_data',
    sa.Column('abundance_id', sa.INTEGER(), nullable=False),
    sa.Column('abundance', sa.FLOAT(), nullable=True),
    sa.Column('dataset_id', sa.INTEGER(), nullable=True),
    sa.Column('subunit_id', sa.INTEGER(), nullable=True),
    sa.Column('pax_load', sa.INTEGER(), nullable=True),
    sa.Column('uniprot_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], [u'abundance_dataset.dataset_id'], ),
    sa.ForeignKeyConstraint(['subunit_id'], [u'protein_subunit.subunit_id'], ),
    sa.PrimaryKeyConstraint('abundance_id')
    )
    op.create_table('_metadata_variable',
    sa.Column('_metadata_id', sa.INTEGER(), nullable=True),
    sa.Column('variable_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_metadata_id'], [u'_metadata.id'], ),
    sa.ForeignKeyConstraint(['variable_id'], [u'variable.id'], )
    )
    op.create_table('reference_genome',
    sa.Column('reference_genome_id', sa.INTEGER(), nullable=False),
    sa.Column('namespace', sa.VARCHAR(length=255), nullable=True),
    sa.Column('organism_strain', sa.VARCHAR(length=255), nullable=True),
    sa.Column('download_url', sa.VARCHAR(length=255), nullable=True),
    sa.ForeignKeyConstraint(['reference_genome_id'], [u'physical_property.observation_id'], ),
    sa.PrimaryKeyConstraint('reference_genome_id')
    )
    op.create_table('observation',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('_metadata_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_metadata_id'], [u'_metadata.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dna_binding_dataset',
    sa.Column('dataset_id', sa.INTEGER(), nullable=False),
    sa.Column('version', sa.INTEGER(), nullable=True),
    sa.Column('complex_id', sa.INTEGER(), nullable=True),
    sa.Column('subunit_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['complex_id'], [u'protein_complex.complex_id'], ),
    sa.ForeignKeyConstraint(['dataset_id'], [u'physical_property.observation_id'], ),
    sa.ForeignKeyConstraint(['subunit_id'], [u'protein_subunit.subunit_id'], ),
    sa.PrimaryKeyConstraint('dataset_id')
    )
    op.create_table('protein_complex',
    sa.Column('complex_id', sa.INTEGER(), nullable=False),
    sa.Column('complex_name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('go_id', sa.VARCHAR(length=255), nullable=True),
    sa.Column('go_dsc', sa.VARCHAR(length=255), nullable=True),
    sa.Column('funcat_id', sa.VARCHAR(length=255), nullable=True),
    sa.Column('funcat_dsc', sa.VARCHAR(length=255), nullable=True),
    sa.Column('su_cmt', sa.VARCHAR(length=255), nullable=True),
    sa.Column('complex_cmt', sa.VARCHAR(length=255), nullable=True),
    sa.Column('disease_cmt', sa.VARCHAR(length=255), nullable=True),
    sa.Column('class_name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('family_name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('molecular_weight', sa.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['complex_id'], [u'physical_entity.observation_id'], ),
    sa.PrimaryKeyConstraint('complex_id')
    )
    op.create_table('protein_interactions',
    sa.Column('interaction_id', sa.INTEGER(), nullable=False),
    sa.Column('participant_a', sa.VARCHAR(length=255), nullable=True),
    sa.Column('participant_b', sa.VARCHAR(length=255), nullable=True),
    sa.Column('interaction', sa.VARCHAR(length=255), nullable=True),
    sa.Column('site_a', sa.VARCHAR(length=255), nullable=True),
    sa.Column('site_b', sa.VARCHAR(length=255), nullable=True),
    sa.Column('stoich_a', sa.VARCHAR(length=255), nullable=True),
    sa.Column('stoich_b', sa.VARCHAR(length=255), nullable=True),
    sa.Column('interaction_type', sa.VARCHAR(length=255), nullable=True),
    sa.ForeignKeyConstraint(['interaction_id'], [u'physical_property.observation_id'], ),
    sa.PrimaryKeyConstraint('interaction_id')
    )
    op.create_table('experiment_type',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cell_compartment',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('_metadata_compartment',
    sa.Column('_metadata_id', sa.INTEGER(), nullable=True),
    sa.Column('compartment_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_metadata_id'], [u'_metadata.id'], ),
    sa.ForeignKeyConstraint(['compartment_id'], [u'cell_compartment.id'], )
    )
    op.create_table('_experimentmetadata_experimenttype',
    sa.Column('_experimentmetadata_id', sa.INTEGER(), nullable=True),
    sa.Column('experiment_type_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_experimentmetadata_id'], [u'_experimentmetadata.id'], ),
    sa.ForeignKeyConstraint(['experiment_type_id'], [u'experiment_type.id'], )
    )
    op.create_table('taxon',
    sa.Column('ncbi_id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('ncbi_id')
    )
    op.create_table('_metadata_method',
    sa.Column('_metadata_id', sa.INTEGER(), nullable=True),
    sa.Column('method_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_metadata_id'], [u'_metadata.id'], ),
    sa.ForeignKeyConstraint(['method_id'], [u'method.id'], )
    )
    op.create_table('_metadata',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('synonym',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('structure',
    sa.Column('struct_id', sa.INTEGER(), nullable=False),
    sa.Column('_value_smiles', sa.VARCHAR(length=255), nullable=True),
    sa.Column('_value_inchi', sa.VARCHAR(length=255), nullable=True),
    sa.Column('_structure_formula_connectivity', sa.VARCHAR(length=255), nullable=True),
    sa.ForeignKeyConstraint(['struct_id'], [u'physical_property.observation_id'], ),
    sa.PrimaryKeyConstraint('struct_id')
    )
    op.create_table('_metadata_cell_line',
    sa.Column('_metadata_id', sa.INTEGER(), nullable=True),
    sa.Column('cell_line_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_metadata_id'], [u'_metadata.id'], ),
    sa.ForeignKeyConstraint(['cell_line_id'], [u'cell_line.id'], )
    )
    op.create_table('rna_seq_experiment',
    sa.Column('experiment_id', sa.INTEGER(), nullable=False),
    sa.Column('accession_number', sa.VARCHAR(), nullable=True),
    sa.Column('exp_name', sa.VARCHAR(), nullable=True),
    sa.Column('has_fastq_files', sa.BOOLEAN(), nullable=True),
    sa.CheckConstraint(u'has_fastq_files IN (0, 1)'),
    sa.ForeignKeyConstraint(['experiment_id'], [u'experiment.id'], ),
    sa.PrimaryKeyConstraint('experiment_id')
    )
    op.create_table('characteristic',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('category', sa.VARCHAR(length=255), nullable=True),
    sa.Column('value', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dna_bidning_data',
    sa.Column('position_id', sa.INTEGER(), nullable=False),
    sa.Column('position', sa.INTEGER(), nullable=True),
    sa.Column('frequency_a', sa.INTEGER(), nullable=True),
    sa.Column('frequency_c', sa.INTEGER(), nullable=True),
    sa.Column('frequency_g', sa.INTEGER(), nullable=True),
    sa.Column('frequency_t', sa.INTEGER(), nullable=True),
    sa.Column('jaspar_id', sa.INTEGER(), nullable=True),
    sa.Column('dataset_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], [u'dna_binding_dataset.dataset_id'], ),
    sa.PrimaryKeyConstraint('position_id')
    )
    op.create_table('method',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('comments', sa.VARCHAR(length=255), nullable=True),
    sa.Column('performer', sa.VARCHAR(length=255), nullable=True),
    sa.Column('hardware', sa.VARCHAR(length=255), nullable=True),
    sa.Column('software', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('physical_entity',
    sa.Column('observation_id', sa.INTEGER(), nullable=False),
    sa.Column('type', sa.VARCHAR(length=255), nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.ForeignKeyConstraint(['observation_id'], [u'observation.id'], ),
    sa.PrimaryKeyConstraint('observation_id')
    )
    op.create_table('_experimentmetadata_method',
    sa.Column('_experimentmetadata_id', sa.INTEGER(), nullable=True),
    sa.Column('method_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_experimentmetadata_id'], [u'_experimentmetadata.id'], ),
    sa.ForeignKeyConstraint(['method_id'], [u'method.id'], )
    )
    op.create_table('cell_line',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('conditions',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('growth_status', sa.VARCHAR(length=255), nullable=True),
    sa.Column('media', sa.VARCHAR(length=255), nullable=True),
    sa.Column('temperature', sa.FLOAT(), nullable=True),
    sa.Column('ph', sa.FLOAT(), nullable=True),
    sa.Column('growth_system', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('_metadata_conditions',
    sa.Column('_metadata_id', sa.INTEGER(), nullable=True),
    sa.Column('conditions_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_metadata_id'], [u'_metadata.id'], ),
    sa.ForeignKeyConstraint(['conditions_id'], [u'conditions.id'], )
    )
    op.create_table('_experimentmetadata',
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('data_format',
    sa.Column('_id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('bio_assay_data_cubes', sa.INTEGER(), nullable=True),
    sa.PrimaryKeyConstraint('_id')
    )
    op.create_table('_experimentmetadata_taxon',
    sa.Column('_experimentmetadata_id', sa.INTEGER(), nullable=True),
    sa.Column('taxon_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_experimentmetadata_id'], [u'_experimentmetadata.id'], ),
    sa.ForeignKeyConstraint(['taxon_id'], [u'taxon.ncbi_id'], )
    )
    op.create_table('kinetic_law',
    sa.Column('kinetic_law_id', sa.INTEGER(), nullable=False),
    sa.Column('enzyme_id', sa.INTEGER(), nullable=True),
    sa.Column('enzyme_type', sa.VARCHAR(length=255), nullable=True),
    sa.Column('tissue', sa.VARCHAR(length=255), nullable=True),
    sa.Column('mechanism', sa.VARCHAR(length=255), nullable=True),
    sa.Column('equation', sa.VARCHAR(length=255), nullable=True),
    sa.ForeignKeyConstraint(['enzyme_id'], [u'protein_complex.complex_id'], ),
    sa.ForeignKeyConstraint(['kinetic_law_id'], [u'physical_property.observation_id'], ),
    sa.PrimaryKeyConstraint('kinetic_law_id')
    )
    op.create_table('physical_property',
    sa.Column('observation_id', sa.INTEGER(), nullable=False),
    sa.Column('type', sa.VARCHAR(length=255), nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.ForeignKeyConstraint(['observation_id'], [u'observation.id'], ),
    sa.PrimaryKeyConstraint('observation_id')
    )
    op.create_table('resource',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('namespace', sa.VARCHAR(length=255), nullable=True),
    sa.Column('_id', sa.VARCHAR(length=255), nullable=True),
    sa.Column('release_date', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('parameter',
    sa.Column('parameter_id', sa.INTEGER(), nullable=False),
    sa.Column('kinetic_law_id', sa.INTEGER(), nullable=True),
    sa.Column('sabio_type', sa.INTEGER(), nullable=True),
    sa.Column('compound_id', sa.INTEGER(), nullable=True),
    sa.Column('value', sa.FLOAT(), nullable=True),
    sa.Column('error', sa.FLOAT(), nullable=True),
    sa.Column('units', sa.VARCHAR(length=255), nullable=True),
    sa.Column('observed_name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('observed_sabio_type', sa.INTEGER(), nullable=True),
    sa.Column('observed_value', sa.FLOAT(), nullable=True),
    sa.Column('observed_error', sa.FLOAT(), nullable=True),
    sa.Column('observed_units', sa.VARCHAR(length=255), nullable=True),
    sa.ForeignKeyConstraint(['compound_id'], [u'compound.compound_id'], ),
    sa.ForeignKeyConstraint(['kinetic_law_id'], [u'kinetic_law.kinetic_law_id'], ),
    sa.PrimaryKeyConstraint('parameter_id')
    )
    op.create_table('abundance_dataset',
    sa.Column('dataset_id', sa.INTEGER(), nullable=False),
    sa.Column('file_name', sa.VARCHAR(), nullable=True),
    sa.Column('score', sa.FLOAT(), nullable=True),
    sa.Column('weight', sa.INTEGER(), nullable=True),
    sa.Column('coverage', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], [u'physical_property.observation_id'], ),
    sa.PrimaryKeyConstraint('dataset_id'),
    sa.UniqueConstraint('file_name')
    )
    op.create_table('rnaseqdataset_rnaseqexperiment',
    sa.Column('experiment_id', sa.INTEGER(), nullable=True),
    sa.Column('sample_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['experiment_id'], [u'rna_seq_experiment.experiment_id'], ),
    sa.ForeignKeyConstraint(['sample_id'], [u'rna_seq_dataset.sample_id'], )
    )
    op.create_table('_experimentmetadata_experimentdesign',
    sa.Column('_experimentmetadata_id', sa.INTEGER(), nullable=True),
    sa.Column('experiment_design_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_experimentmetadata_id'], [u'_experimentmetadata.id'], ),
    sa.ForeignKeyConstraint(['experiment_design_id'], [u'experiment_design.id'], )
    )
    op.create_table('progress',
    sa.Column('database_name', sa.VARCHAR(), nullable=False),
    sa.Column('amount_loaded', sa.INTEGER(), nullable=True),
    sa.PrimaryKeyConstraint('database_name')
    )
    op.create_table('protein_subunit',
    sa.Column('subunit_id', sa.INTEGER(), nullable=False),
    sa.Column('subunit_name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('uniprot_id', sa.VARCHAR(length=255), nullable=True),
    sa.Column('entrez_id', sa.INTEGER(), nullable=True),
    sa.Column('ec_number', sa.VARCHAR(length=255), nullable=True),
    sa.Column('gene_name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('gene_syn', sa.VARCHAR(length=255), nullable=True),
    sa.Column('class_name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('family_name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('coefficient', sa.INTEGER(), nullable=True),
    sa.Column('canonical_sequence', sa.VARCHAR(length=255), nullable=True),
    sa.Column('mass', sa.INTEGER(), nullable=True),
    sa.Column('length', sa.INTEGER(), nullable=True),
    sa.Column('molecular_weight', sa.FLOAT(), nullable=True),
    sa.Column('pax_load', sa.INTEGER(), nullable=True),
    sa.Column('proteincomplex_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['proteincomplex_id'], [u'protein_complex.complex_id'], ),
    sa.ForeignKeyConstraint(['subunit_id'], [u'physical_entity.observation_id'], ),
    sa.PrimaryKeyConstraint('subunit_id')
    )
    op.create_table('experiment_design',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('_metadata_characteristic',
    sa.Column('_metadata_id', sa.INTEGER(), nullable=True),
    sa.Column('characteristic_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_metadata_id'], [u'_metadata.id'], ),
    sa.ForeignKeyConstraint(['characteristic_id'], [u'characteristic.id'], )
    )
    op.create_table('experiment',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('_experimentmetadata_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_experimentmetadata_id'], [u'_experimentmetadata.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('_experimentmetadata_resource',
    sa.Column('_experimentmetadata_id', sa.INTEGER(), nullable=True),
    sa.Column('resource_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_experimentmetadata_id'], [u'_experimentmetadata.id'], ),
    sa.ForeignKeyConstraint(['resource_id'], [u'resource.id'], )
    )
    op.create_table('reaction',
    sa.Column('reaction_id', sa.INTEGER(), nullable=False),
    sa.Column('compound_id', sa.INTEGER(), nullable=True),
    sa.Column('compartment_id', sa.INTEGER(), nullable=True),
    sa.Column('coefficient', sa.FLOAT(), nullable=True),
    sa.Column('_is_reactant', sa.BOOLEAN(), nullable=True),
    sa.Column('_is_product', sa.BOOLEAN(), nullable=True),
    sa.Column('_is_modifier', sa.BOOLEAN(), nullable=True),
    sa.Column('rxn_type', sa.VARCHAR(length=255), nullable=True),
    sa.Column('kinetic_law_id', sa.INTEGER(), nullable=True),
    sa.CheckConstraint(u'_is_modifier IN (0, 1)'),
    sa.CheckConstraint(u'_is_product IN (0, 1)'),
    sa.CheckConstraint(u'_is_reactant IN (0, 1)'),
    sa.ForeignKeyConstraint(['compartment_id'], [u'cell_compartment.id'], ),
    sa.ForeignKeyConstraint(['compound_id'], [u'compound.compound_id'], ),
    sa.ForeignKeyConstraint(['kinetic_law_id'], [u'kinetic_law.kinetic_law_id'], ),
    sa.PrimaryKeyConstraint('reaction_id')
    )
    op.create_table('_metadata_resource',
    sa.Column('_metadata_id', sa.INTEGER(), nullable=True),
    sa.Column('resource_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['_metadata_id'], [u'_metadata.id'], ),
    sa.ForeignKeyConstraint(['resource_id'], [u'resource.id'], )
    )
    # ### end Alembic commands ###
